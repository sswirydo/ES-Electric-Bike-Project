/mnt/c/Users/Szymon/Desktop/Folders/Embedded\ Software/uppaal-tiga-0.17/bin-Linux/verifytga -w 0 -c -s /mnt/c/Users/Szymon/Desktop/Git/F410-Electric-Bike-Project/uppaal/uppaal_project.xml /mnt/c/Users/Szymon/Desktop/Git/F410-Electric-Bike-Project/uppaal/uppaal_project.q
Options for the verification:
  Generating no trace
  Search order is breadth first (UPPAAL), automatic (TIGA)
  Using conservative space optimisation
  Seed is 1653514257
  State space representation uses minimal constraint systems

Verifying property 1 at line 6
 -- Property is satisfied.
$v_gameInfoPlayInitial state:
( Motor.Assist Brake.Released Battery.High Scheduler.BatteryUpdate Observer.Loop ) motorState=1 brake=0 batteryLevel=1 
(schedule_timer==timer1 && timer1==timer2 && timer2==0)

Strategy to avoid losing:

State: ( Motor.Assist Brake.Pressed Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=1 brake=1 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (2<=timer1 && schedule_timer==timer2 && timer2==0) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Assist->Motor.Choose { 1, motorUpdate?, timer1 := 0 }

State: ( Motor.Recharge Brake.Released Battery.Low Scheduler.Wait Observer.Loop ) motorState=2 brake=0 batteryLevel=0 
When you are in (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Recharge Brake.Pressed Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=2 brake=1 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer==timer2 && timer2==0) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Recharge->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Assist Brake.Released Battery.Low Scheduler.MotorUpdate Observer.Loop ) motorState=1 brake=0 batteryLevel=0 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedultimer1 && 5<=timer2 && schedule_timer==0) || (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Idle->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Idle Brake.Pressed Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=0 brake=1 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer==timer2 && timer2==0) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Idle->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Idle Brake.Released Battery.Low Scheduler.Wait Observer.Loop ) motorState=0 brake=0 batteryLevel=0 
When you are in (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Choose Brake.Pressed Battery.Low Scheduler.Wait Observer.Loop ) motorState=2 brake=1 batteryLevel=0 
When you are in (schedule_timer-timer1==-2 && timer1-timer2==-2 && timer2==4) || (schedule_timer-timer1==-2 && timer1-timer2==-1 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (schedule_timer-timer1==-2 && timer1==timer2 && timer2==2) || (schedule_timer-timer1==-2 && timer1-timer2==1 && timer2==1) || (schedule_timer-timer1==-2 && timer1-timer2==2 && timer2==0) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }
When you are in (2<timer1 && 5<=timer2 && schedule_timer==0) || (2<timer1 && schedule_timer-timer2==-4 && timer2==4) || (2<timer1 && schtimer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }

State: ( Motor.Recharge Brake.Pressed Battery.Low Scheduler.MotorUpdate Observer.Loop ) motorState=2 brake=1 batteryLevel=0 
When you are in (2<timer1 && 5<=timer2 && schedule_timer==0) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer==timer2 && timer2==0) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Recharge->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Assist Brake.Pressed Battery.Low Scheduler.Wait Observer.Loop ) motorState=1 brake=1 batteryLevel=0 
When you are in (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer==timer2 && timer2==1) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Choose Brake.Pressed Battery.High Scheduler.Wait Observer.Loop ) motorState=1 brake=1 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer==timer1 && timer1==0) || (schedule_timer==timer1 && timer1-timer2==-4 && timer2==4) || (schedule_timer==timer1 && timer1-timer2==-3 && timer2==3) || (schedule_timer==timer1 && timer1-timer2==-2 && timer2==2) || (schedule_timer==timer1 && timer1-timer2==-1 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }

State: ( Motor.Assist Brake.Pressed Battery.High Scheduler.Wait Observer.Loop ) motorState=1 brake=1 batteryLevel=1 
When you are in (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer==timer2 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Recharge Brake.Released Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=2 brake=0 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Recharge->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Choose Brake.Released Battery.High Scheduler.Wait Observer.Loop ) motorState=1 brake=0 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer==timer1 && timer1==0) || (schedule_timer==timer1 && timer1-timer2==-4 && timer2==4) || (schedule_timer==timer1 && timer1-timer2==-3 && timer2==3) || (schedule_timer==timer1 && timer1-timer2==-2 && timer2==2) || (schedule_timer==timer1 && timer1-timer2==-1 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Motor.Choose->Motor.Assist { 1, tau, motorState := 1 }

State: ( Motor.Assist Brake.Released Battery.High Scheduler.Wait Observer.Loop ) motorState=1 brake=0 batteryLevel=1 
When you are in (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Recharge Brake.Released Battery.High Scheduler.Wait Observer.Loop ) motorState=2 brake=0 batteryLevel=1 
When you are in (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Recharge Brake.Released Battery.Low Scheduler.MotorUpdate Observer.Loop ) motorState=2 brake=0 batteryLevel=0 
When you are in (2<=timer1 && 5<=timer2 && schedule_timer==0) || (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Recharge->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Assist Brake.Released Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=1 brake=0 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Assist->Motor.Choose { 1, motorUpdate?, timer1 := 0 }

State: ( Motor.Choose Brake.Pressed Battery.Low Scheduler.Wait Observer.Loop ) motorState=1 brake=1 batteryLevel=0 
When you are in (schedule_timer==timer1 && timer1-timer2==-2 && timer2==2) || (schedule_timer==timer1 && timer1-timer2==-1 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }

State: ( Motor.Assist Brake.Released Battery.Low Scheduler.Wait Observer.Loop ) motorState=1 brake=0 batteryLevel=0 
When you are in (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Idle Brake.Released Battery.High Scheduler.Wait Observer.Loop ) motorState=0 brake=0 batteryLevel=1 
When you are in (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Choose Brake.Released Battery.Low Scheduler.Wait Observer.Loop ) motorState=2 brake=0 batteryLevel=0 
When you are in (2<=timer1 && 5<=timer2 && schedule_timer==0) || (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }

State: ( Motor.Idle Brake.Released Battery.High Scheduler.MotorUpdate Observer.Loop ) motorState=0 brake=0 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Scheduler.MotorUpdate->Scheduler.Wait { 1, motorUpdate!, 1 }
Motor.Idle->Motor.Choose { 1, motorUpdate?, 1 }

State: ( Motor.Choose Brake.Released Battery.High Scheduler.Wait Observer.Loop ) motorState=0 brake=0 batteryLevel=1 
When you are in (5<=timer2 && schedule_timer-timer1==-1 && timer1==1) || (2<=timer1 && 5<=timer2 && schedule_timer==0) || (schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==4) || (2<=timer1 && schedule_timer-timer2==-4 && timer2==4) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-3 && timer2==3) || (2<=timer1 && schedule_timer-timer2==-1 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (2<=timer1 && schedule_timer-timer2==-2 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1), take transition Motor.Choose->Motor.Assist { 1, tau, motorState := 1 }

State: ( Motor.Choose Brake.Pressed Battery.Low Scheduler.Wait Observer.Loop ) motorState=0 brake=1 batteryLevel=0 
When you are in (schedule_timer-timer1==-2 && timer1-timer2==-2 && timer2==4) || (schedule_timer-timer1==-2 && timer1-timer2==-1 && timer2==3) || (schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==3) || (schedule_timer-timer1==-2 && timer1==timer2 && timer2==2) || (schedule_timer-timer1==-2 && timer1-timer2==1 && timer2==1) || (schedule_timer-timer1==-2 && timer1-timer2==2 && timer2==0) || (schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==2) || (schedule_timer-timer1==-1 && timer1==timer2 && timer2==1) || (schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==0), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }
When you are in (2<timer1 && 5<=timer2 && schedule_timer==0) || (2<timer1 && schedule_timer-timer2==-4 && timer2==4) || (2<timer1 && schedule_timer-timer2==-3 && timer2==3) || (2<timer1 && schedule_timer-timer2==-2 && timer2==2) || (2<timer1 && schedule_timer-timer2==-1 && timer2==1) || (2<timer1 && schedule_timer==timer2 && timer2==0), take transition Motor.Choose->Motor.Recharge { 1, tau, motorState := 2 }

State: ( Motor.Choose Brake.Released Battery.Low Scheduler.Wait Observer.Loop ) motorState=1 brake=0 batteryLevel=0 
When you are in (5<=timer2 && schedule_timer==timer1 && timer1==0) || (schedule_timer==timer1 && timer1-timer2==-4 && timer2==4) || (schedule_timer==timer1 && timer1-timer2==-3 && timer2==3) || (schedule_timer==timer1 && timer1-timer2==-2 && timer2==2) || (schedule_timer==timer1 && timer1-timer2==-1 && timer2==1) || (schedule_timer==timer1 && timer1==timer2 && timer2==0), take transition Motor.Choose->Motor.Idle { 1, tau, motorState := 0 }

State: ( Motor.Recharge Brake.Pressed Battery.High Scheduler.Wait Observer.Loop ) motorState=2 brake=1 batteryLevel=1 
When you are in (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer==timer2 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }

State: ( Motor.Idle Brake.Pressed Battery.High Scheduler.Wait Observer.Loop ) motorState=0 brake=1 batteryLevel=1 
When you are in (schedule_timer==1 && 6<=timer2 && schedule_timer-timer1==-1 && timer1==2) || (schedule_timer==1 && 6<=timer2 && schedule_timer==timer1 && timer1==1) || (schedule_timer==1 && 3<=timer1 && 6<=timer2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-3 && timer2==5) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-4 && timer2==5) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-4 && timer2==5) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-2 && timer2==4) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-3 && timer2==4) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-3 && timer2==4) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==-1 && timer2==3) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-2 && timer2==3) || (schedule_timer==1 && 3<=timer1 && schedule_timer-timer2==-1 && timer2==2) || (schedule_timer==1 && 3<=timer1 && schedule_timer==timer2 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1-timer2==-1 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1==timer2 && timer2==2) || (schedule_timer==1 && schedule_timer-timer1==-1 && timer1-timer2==1 && timer2==1) || (schedule_timer==1 && schedule_timer==timer1 && timer1==timer2 && timer2==1), take transition Scheduler.Wait->Scheduler.BatteryUpdate { schedule_timer == 1, tau, schedule_timer := 0 }
