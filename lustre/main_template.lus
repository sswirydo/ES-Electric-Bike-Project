-- Student: SWIRYDOWICZ SZYMON

---------------------------------------------------------------------
-- Constants:
const
  SHORT_DROP_NUM:int = 2;
  LONG_DROP_NUM:int = 10;
  MAX_NOF_SHORT_DROPS:int = 7;
  MAX_SPEED:real = 7.0;
  BRK_SOFT:real = 1.0;

---------------------------------------------------------------------

-- task L1

-- private to the ShortDrop node
-- counts number of 'time' units since UP is false
node ShortCounter(up:bool) returns (count:int);
let
  count = ( if up then 0
            else if not up then (0 -> pre(count) + 1)
            else 0 -> pre(count)
  );
tel

node ShortDrop(up:bool) returns (drop:bool);
var can_short:bool;
let
  can_short = ShortCounter(up) mod SHORT_DROP_NUM = 0;
  -- we check if i and i-1 of UP are false, 
  -- if so, set the shortDrop to true iff we didn't have a short drop before (modulo)
  drop = (  if not up and not (true->pre(up)) then can_short 
            else false
  ); 
tel

-- counts the number of ShortDrops encountered during program execution
node ShortDropCounter(up:bool) returns (count:int);
let
  count = ( if ShortDrop(up) then (0->pre(count) + 1)
            else 0->pre(count)
  );
tel

node LongDropCounter(up:bool) returns (count:int);
let
  count = ( if up then 0
            else if not up then (0->pre(count) + 1)
            else 0->pre(count)
  );
tel

node ConnectionAlarm(up:bool) returns (alarm:bool);
let
  alarm = ( if false->pre(alarm) = true then true -- ensures alarm stays ON once set
            else if ShortDropCounter(up) >= MAX_NOF_SHORT_DROPS then true -- looks for 7 short drops of 2 units
            else if LongDropCounter(up) >= LONG_DROP_NUM then true -- looks for 1 long drop of 10 units
            else false
  );
  --%PROPERTY (false->pre(alarm) = true) => (alarm = true);
  --%PROPERTY (ShortDropCounter(up) >= MAX_NOF_SHORT_DROPS) => (alarm = true);
  --%PROPERTY (LongDropCounter(up) >= LONG_DROP_NUM) => (alarm = true);
tel

-- COPY OF THE ConnectionAlarm FOR THE DIAGRAM TASK (+= short/long flags)
node ConnectionAlarmWithFlags(up:bool) returns (alarm:bool; short:bool; long:bool);
let
  alarm = ( if false->pre(alarm) = true then true
            else if ShortDropCounter(up) >= MAX_NOF_SHORT_DROPS then true
            else if LongDropCounter(up) >= LONG_DROP_NUM then true
            else false
  );
  short = ShortDrop(up);
  long = (not up) and LongDropCounter(up) mod LONG_DROP_NUM = 0;
tel

-- task L2
node BrakeCableActuator(brk:real; up:bool) returns (clinch:bool);
let
  clinch = (  if ConnectionAlarm(up) and (brk <= BRK_SOFT and brk > real(0.0)) then true -- SOFT BREAK + ALARM
              else if brk > BRK_SOFT then true -- HARD BREAK
              else false
  );
  --%PROPERTY (clinch = true) => (brk <> 0.0);
  --%PROPERTY (brk > 0.0 and brk <= BRK_SOFT and not ConnectionAlarm(up)) => (clinch = false);
  --%PROPERTY (brk > 0.0 and brk <= BRK_SOFT and ConnectionAlarm(up)) => (clinch = true);
  --%PROPERTY (brk > BRK_SOFT and ConnectionAlarm(up)) => (clinch = true);
  --%PROPERTY (brk > BRK_SOFT and not ConnectionAlarm(up)) => (clinch = true);
tel

-- task L3
node LossyChannel(noise,brk:real; up:bool) returns (brk_rcvd:real);
let
  brk_rcvd = (if up then brk else noise);
  --%PROPERTY (not up) => (brk_rcvd = noise);
  --%PROPERTY (up) => (brk_rcvd = brk);
tel

-- task L4
node MotorController(brk_rcvd:real; up:bool; human,speed,battery:real) returns (asst_lvl:real);
var 
  assist_allowed:bool;
  regen_allowed:bool;
let
  -- * assumption: if both assist and regen are true then regen is prioritised (exception: brk_rcvd = 0.0)
  assist_allowed = (if ConnectionAlarm(up) then false
                    else if speed > MAX_SPEED then false
                    else if battery = 0.0 then false
                    else true
  );
  regen_allowed = ( if ConnectionAlarm(up) then false
                    else if not up then false
                    else true
  );
  asst_lvl = (  if regen_allowed and assist_allowed and brk_rcvd = 0.0 then human
                else if regen_allowed then -brk_rcvd
                else if assist_allowed then human
                else 0.0
  );
  --%PROPERTY (not up) => (regen_allowed = false);
  --%PROPERTY (speed > MAX_SPEED) => (assist_allowed = false);
  --%PROPERTY (battery = 0.0) => (assist_allowed = false);
  --%PROPERTY ((regen_allowed = true) and (assist_allowed = false)) => (asst_lvl = -brk_rcvd);
  --%PROPERTY ((regen_allowed = false) and (assist_allowed = true)) => (asst_lvl = human);
  --%PROPERTY ((brk_rcvd = 0.0) and (assist_allowed = true) and ((regen_allowed = true))) => (asst_lvl = human);

tel

-- task L5
node System(up:bool; noise,brk,human,speed,battery:real) returns (clinch:bool; asst_lvl:real);
var
  alarm:bool;
  brk_rcvd:real;
  temp_assist:real;
let
  brk_rcvd = LossyChannel(noise,brk,up);
  alarm = ConnectionAlarm(up);

  clinch = (if alarm and (brk_rcvd > 0.0) then true
            else BrakeCableActuator(brk,up)
  );

  temp_assist = MotorController(brk_rcvd,up,human,speed,battery);
  asst_lvl = (  if alarm and (temp_assist < 0.0) then 0.0
                else if (temp_assist < 0.0) and (brk <= 0.0) then 0.0
                else if (speed > MAX_SPEED) and (temp_assist > 0.0) then 0.0
                else if not (temp_assist = 0.0) and not (temp_assist = -brk) and not (temp_assist = human) then 0.0
                else if (brk > 0.0) and (temp_assist > 0.0) and up and (not alarm) then -brk
                else temp_assist
  );

  --%MAIN;
  --%PROPERTY ((alarm = true) and (brk > 0.0)) => (clinch = true);
  --%PROPERTY (alarm = true) => (asst_lvl >= 0.0);
  --%PROPERTY (asst_lvl < 0.0) => (brk > 0.0);
  --%PROPERTY (speed > MAX_SPEED) => (asst_lvl <= 0.0);
  --%PROPERTY (asst_lvl = 0.0) or (asst_lvl = -brk) or (asst_lvl = human);
  --%PROPERTY ((brk > 0.0) and (alarm = false) and (up = true)) => (asst_lvl < 0.0);

tel
